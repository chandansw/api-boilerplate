{
    "swagger": "2.0",
    "info": {
        "description": "Feeatherback API",
        "version": "0.0.1",
        "title": "Featherback API",
        "contact": {
            "email": "apiteam@featherback.co"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "petstore.swagger.io",
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/user/{userId}": {
            "get": {
                "summary": "Get User by ID",
                "description": "Returns a single User object or 404 if the User does not exist",
                "operationId": "user-id-get",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "UserResponse": {
			"type": "object",
			"properties": {
				"docs": {
					"type": "object",
					"properties": {
						"admin": {
							"type": "boolean",
							"example": false
						},
						"createdAt": {
							"type": "string",
							"example": "2018-08-23T15:48:21.259Z"
						},
						"customerId": {
							"type": "string",
							"example": "000000000000000000000000"
						},
						"enabled": {
							"type": "boolean",
							"example": true
						},
						"id": {
							"type": "string",
							"example": "000000000000000000000000"
						},
						"login": {
							"type": "string",
							"example": "jimbo.jones@example.com"
						},
						"name": {
							"type": "string",
							"example": "Jimbo Jones"
						},
						"password": {
							"type": "string",
							"example": "Passw0rd"
						},
						"root": {
							"type": "boolean",
							"example": false
						},
						"type": {
							"type": "string",
							"example": "User"
						},
						"updatedAt": {
							"type": "string",
							"example": "2018-08-23T15:48:21.259Z"
						}
					}
				}
			}
		},
		"400 Bad Request":{
			"type": "object",
			"properties": {
				"message":{
					"type":"string",
					"example": "Field Required"
				}
			}
		},
		"403 Unauthorized":{
			"type": "object",
			"properties": {
				"message":{
					"type":"string",
					"example": "Unauthorized"
				}
			}
		},
		"404 Not Found":{
			"type": "object",
			"properties": {
				"message":{
					"type":"string",
					"example": "Record does not exist with that ID"
				}
			}
		},
		"500 Internal Server Error":{
			"type": "object",
			"properties": {
				"message":{
					"type":"string",
					"example": "Danger Will Robinson!"
				}
			}
		}
    }
}
